#!/usr/bin/python
"""
Copyright (C) 2011 Konstantin Andrusenko
    See the documentation for further information on copyrights,
    or contact the author. All Rights Reserved.

@author Konstantin Andrusenko
@date July 30, 2011

node-type-installer is utility for making and installing images
"""

import yaml
import os
import sys
import shutil
from blik.utils.databaseConnection import DatabaseConnection
from blik.utils.exec_command import run_command
from pexpect import spawn
from datetime import datetime

PARAMS_TYPES = {'string': 1, 'integer': 2, 'datetime': 3, 'hidden': 4}
NODE_OBJECT = 2

DISKLESS_KERNELS_PATH = '/opt/blik/diskless/kernels/'
TMP_DIR = '/opt/blik/tmp/'
CANONICAL_IMAGE_PATH = '/opt/blik/diskless/images/canonical/%s/image.tar.bz2'
IMAGE_PATH = '/opt/blik/diskless/images/%s/%s/'
PXECONFIG_DIR = '/opt/blik/diskless/pxelinux.cfg/'

localmount = '''#!/sbin/runscript

description="Mounts disks and swap according to /etc/fstab."

depend()
{
        need fsck
        use lvm modules mtab
        after lvm modules
        keyword -jail -openvz -prefix -vserver -lxc
}

start()
{
        # Mount local filesystems in /etc/fstab.
        local types="noproc" x= no_netdev=
        for x in $net_fs_list; do
                types="${types},${x}"
        done

        if [ "$RC_UNAME" = Linux ]; then
                no_netdev="-O no_netdev"
        fi
        ebegin "Mounting local filesystems"
        mount -at "$types" $no_netdev
        eend $? "Some local filesystem failed to mount"

        # Always return 0 - some local mounts may not be critical for boot
        return 0
}

stop()
{
        echo "Umount filesystems skiped!"
}
'''

class ParameterSpec:
    def __init__(self, name, type, posible_params, default):
        self.name = name
        self.type = type
        self.posible_params = posible_params
        self.default = default

class KernelSource:
    def __init__(self, arch, url):
        self.arch = arch
        self.kernel_url = url

class NodeType:
    def __init__(self):
        self.type_name = None
        self.supported_archs = None
        self.packages = None
        self.description = None
        self.rootfs_mode = None
        self.kernels = []
        self.parameters = []


def print_log(message):
    print ('[%s] %s' % (datetime.now(), message))

def _get_item(obj, element_name):
    element = obj.get(element_name, None)
    if element is None:
        raise Exception('<%s> element is not found'%element_name)

    return element


def parse_specification(yaml_file):
    url_lower = yaml_file.lower()
    if url_lower.startswith('http://') or url_lower.startswith('ftp://'):
        yaml_file_out = '/tmp/tmp-node-spec.yaml'

        ret,out,err = run_command(['wget', yaml_file, '-O', yaml_file_out])
        if ret:
            raise Exception('Node specification is not downloaded! Details: %s'%err)
    else:
        yaml_file_out = yaml_file

    f = open(yaml_file)
    objects = yaml.load(f.read())
    f.close()

    nt = NodeType()
    nt.node_info = _get_item(objects, 'node_info')

    nt.type_name = _get_item(nt.node_info, 'type_name')
    supported_archs = _get_item(nt.node_info, 'supported_archs')
    nt.supported_archs = _get_item(nt.node_info, 'supported_archs')

    nt.packages = _get_item(nt.node_info, 'packages')
    nt.description = _get_item(nt.node_info, 'description')
    nt.rootfs_mode = _get_item(nt.node_info, 'rootfs_mode')

    kernels = objects.get('kernels', [])
    for kernel in kernels:
        kernel_url = _get_item(kernel, 'kernel_url')
        arch = _get_item(kernel, 'arch')

        nt.kernels.append(KernelSource(arch, kernel_url))

    params = objects.get('parameters', [])
    for param in params:
        name = param['name']
        type = param['type']
        posible_params = param.get('posible_params', [])
        default = param.get('default', None)

        nt.parameters.append(ParameterSpec(name, type, posible_params, default))

    return nt

def insert_node_type(node_type):
    dbsrv = DatabaseConnection()

    rows = dbsrv.select("SELECT description FROM nm_node_type WHERE type_sid=%s",(node_type.type_name,))

    if not rows:
        dbsrv.modify("INSERT INTO nm_node_type (type_sid, description) VALUES (%s, %s)",
                    (node_type.type_name, node_type.description))

        print_log('Node type "%s" is inserted into database'%node_type.type_name)
    else:
        dbsrv.modify("UPDATE nm_node_type SET description=%s WHERE type_sid=%s",
                    (node_type.description, node_type.type_name))

        print_log('Node type "%s" is updated in database'%node_type.type_name)


def insert_params_spec(node_type):
    dbsrv = DatabaseConnection()
    node_type_id = dbsrv.select('SELECT id FROM nm_node_type WHERE type_sid=%s', (node_type.type_name,))[0][0]

    for param_spec in node_type.parameters:
        param_name = param_spec.name
        param_type = PARAMS_TYPES.get(param_spec.type, None)
        if param_type is None:
            raise Exception('Parameter type "%s" is not supported!'%param_spec.type)

        if param_spec.posible_params is None:
            param_spec.posible_params = ''
        if param_spec.default is None:
            param_spec.default = ''

        param_posible_val = '|'.join(param_spec.posible_params)
        param_default = param_spec.default

        params = (param_name, NODE_OBJECT, node_type_id)
        rows = dbsrv.select("SELECT id FROM nm_config_spec WHERE parameter_name=%s AND object_type_id=%s AND config_object=%s", params)

        if rows:
            param_id = rows[0][0]
            params = (param_type, param_posible_val, param_default, param_id)
            dbsrv.modify("UPDATE nm_config_spec SET parameter_type=%s, posible_values_list=%s, default_value=%s WHERE id=%s", params)
            print_log('Parameter type "%s" is updated in database'%param_name)
        else:
            params = (NODE_OBJECT, node_type_id, param_name, param_type, param_posible_val, param_default)
            dbsrv.modify("INSERT INTO nm_config_spec (object_type_id, config_object, parameter_name, \
                        parameter_type, posible_values_list, default_value) VALUES (%s,%s,%s,%s,%s,%s)", params)
            print_log('Parameter type "%s" is inserted into database'%param_name)


def install_kernels(node_type):
    for kernel in node_type.kernels:
        url_lower = kernel.kernel_url.lower()
        if url_lower.startswith('http://') or url_lower.startswith('ftp://'):
            url = '/tmp/tmp-kernel'

            ret,out,err = run_command(['wget', kernel.kernel_url, '-O', url])
            if ret:
                raise Exception('Kernel is not downloaded! Details: %s'%err)
        else:
            url = kernel.kernel_url

        path = DISKLESS_KERNELS_PATH + '%s/'%(node_type.type_name)
        if not os.path.exists(path):
            os.makedirs(path)

        shutil.copy(url, path + 'bzImage-%s'%kernel.arch)



#----------------- image ---------------------------------------------

def get_emerge_variables():
    lines = open('/etc/make.conf').readlines()

    ret_lines = []
    for line in lines:
        line = line.strip()

        if line.startswith('GENTOO_MIRRORS'):
            ret_lines.append(line)

        elif line.startswith('PORTAGE_BINHOST'):
            ret_lines.append(line)

    ret_lines.append('FEATURES="buildpkg"')
    ret_lines.append('CONFIG_PROTECT="-*"')
    ret_lines.append('COLLISION_IGNORE="/etc /lib/modules"')

    return ret_lines



def _prepare_work_path(node_type, arch):
    if os.path.exists(TMP_DIR):
        shutil.rmtree(TMP_DIR)
    os.mkdir(TMP_DIR)

    #check exists image for update
    need_move = True
    work_path = None
    image_path = IMAGE_PATH % (node_type.type_name, arch)

    if node_type.rootfs_mode != 'networked':
        exists_path = image_path + 'image.tar.bz2'

        if os.path.exists(exists_path):
            print_log('Untar image %s to tmp dir...'%exists_path)
            ret,out,err = run_command(['tar', '-xjf', exists_path, '-C', TMP_DIR])
        else:
            print_log('Untar canonical image to tmp dir...')

            ret,out,err = run_command(['tar', '-xjf', CANONICAL_IMAGE_PATH %arch, '-C', TMP_DIR])

        if ret:
            raise Exception('Image is not unpacked! Details: %s'%err)

        work_path = TMP_DIR
    else:
        if os.path.exists(image_path+'sbin/init'):
            work_path = image_path
            need_move = False
        else:
            print_log('Untar canonical image to tmp dir...')
            ret,out,err = run_command(['tar', '-xjf', CANONICAL_IMAGE_PATH %arch, '-C', TMP_DIR])
            if ret:
                raise Exception('Image is not unpacked! Details: %s'%err)

            work_path = TMP_DIR

    if not os.path.exists(image_path):
        os.makedirs(image_path)

    return image_path, work_path, need_move

def _fix_diskless_issues(work_path, rootfs_mode):
    fstab = 'shm    /dev/shm   tmpfs     nodev,nosuid,noexec     0 0\n'
    fstab +='none   /dev/pts   devpts    defaults                0 0\n'

    open('%setc/fstab'%work_path, 'w').write(fstab)

    if rootfs_mode == 'networked':
        killprocs = '#!/sbin/runscript\n'
        killprocs += 'description="Kill all processes so we can unmount disks cleanly."\n'
        killprocs += 'depend()\n{\n   keyword -prefix\n}\n'
        killprocs += 'start()\n{\n   echo "Skip killing processes for networted rootfs!"\n}\n'

        open('%setc/init.d/killprocs'%work_path, 'w').write(killprocs)

        mountro = '#!/sbin/runscript\n'
        mountro += 'description="Re-mount filesytems read-only for a clean reboot."\n'
        mountro += 'depend()\n{\n   keyword -prefix\n}\n'
        mountro += 'start()\n{\n   echo "Skip remounting filesystems read-only"\n}\n'

        open('%setc/init.d/mount-ro'%work_path, 'w').write(mountro)
        open('%setc/init.d/localmount'%work_path, 'w').write(localmount)


def is_gentoo_distr():
    return 'gentoo' in os.uname()[2]

def _yum_update(node_type, arch, work_path, log_file):
    #chroot to tmp rootfs and install packages
    session = None
    try:
        session = spawn('chroot %s /bin/bash'%work_path, timeout=3000)
        session.logfile_read = log_file
        session.logfile_write = log_file
        session.expect("#")
        prompt = 'CHROOT #'
        session.sendline('export PS1="%s"'%prompt)
        session.readline()
        session.expect(prompt)
        session.sendline('yum clean all')
        session.readline()
        session.expect(prompt)

        for package in node_type.packages:
            print_log( 'Installing %s package...' % package)

            session.sendline('yum install %s'%package)
            session.readline()
            while True:
                ret = session.expect(['[y/N]', prompt])
                if ret == 0:
                    session.sendline('y')
                    session.readline()
                elif ret == 1:
                    break

            stdout = session.before

            if (len(stdout)<100) or (stdout.find('ERROR')>0):
                raise Exception('Error ocured while install %s package! See log for details.'% package)

        #pack image if need
        if node_type.rootfs_mode != 'networked':
            #pack image
            print_log('Pack image ...')
            session.sendline('tar cvjpf /image.tar.bz2 / -X /root/stage4.excl')
            session.readline()
            session.expect(prompt)
    finally:
        if session:
            session.sendline('exit')
            session.close()

        ret = os.system('umount %sproc'%work_path)
        if ret:
            raise Exception('Unmounting /proc failed!')


def _portage_update(node_type, arch, work_path, log_file):
    #chroot to tmp rootfs and install packages
    session = None
    try:
        session = spawn('chroot %s /bin/bash'%work_path, timeout=3000)
        session.logfile_read = log_file
        session.logfile_write = log_file
        session.expect("#")

        variables = get_emerge_variables()
        prompt = 'CHROOT #'
        prefix = ' '.join(variables)

        session.sendline('env-update; source /etc/profile')
        session.readline()
        session.sendline('export PS1="%s"'%prompt)
        session.readline()
        session.expect(prompt)

        for package in node_type.packages:
            print_log( 'Installing %s package...' % package)

            session.sendline('%s emerge -v --color n --usepkg --getbinpkg -uND %s'%(prefix, package))
            session.readline()
            session.readline()
            while True:
                ret = session.expect(['(Y/n)', prompt])
                if ret == 0:
                    session.sendline('Y')
                    session.readline()
                elif ret == 1:
                    break

            stdout = session.before

            if (len(stdout)<100) or (stdout.find('>>> Failed to emerge')>0):
                raise Exception('Error ocured while install %s package! See log for details.'%package)


        session.sendline('rc-update -u')
        session.readline()
        session.expect(prompt)
        session.sendline('/etc/init.d/savecache start')
        session.readline()
        session.expect(prompt)


        #pack image if need
        if node_type.rootfs_mode != 'networked':
            #pack image
            print_log('Pack image ...')
            session.sendline('tar cvjpf /image.tar.bz2 / -X /root/stage4.excl')
            session.readline()
            session.expect(prompt)
    finally:
        if session:
            session.sendline('exit')
            session.close()

        ret = os.system('umount %susr/portage'%work_path)
        if ret:
            raise Exception('Unmounting portage tree failed!')

        ret = os.system('umount %sproc'%work_path)
        if ret:
            raise Exception('Unmounting /proc failed!')

    #os.system('rm -rf %stmp/*'%work_path)
    #os.system('rm -rf %svar/log/*'%work_path)


def install_image(node_type, arch):
    image_path, work_path, need_move = _prepare_work_path(node_type, arch)

    run_command(['umount', '%sproc'%work_path])

    if is_gentoo_distr():
        _fix_diskless_issues(work_path, node_type.rootfs_mode)

        run_command(['umount', '%susr/portage'%work_path])
        #bind portage tree
        ret,out,err = run_command(['mount', '--bind', '/usr/portage', work_path+'usr/portage'])
        if ret:
            raise Exception('Binding portage tree error! Details: %s'%err)

    #preparing to chroot
    os.system('cp /etc/resolv.conf %setc/resolv.conf'%work_path)
    os.system('mount -t proc none %sproc'%work_path)
    os.system('cp -a /dev/* %sdev/'%work_path)

    #open log file for write
    log_file = open('/tmp/make_image-%s.log'%arch,'w')
    print_log('See log in /tmp/make_image-%s.log ...'%arch)

    #chroot to image rootfs and install/update software.
    if is_gentoo_distr():
        _portage_update(node_type, arch, work_path, log_file)
    else:
        _yum_update(node_type, arch, work_path, log_file)

    if node_type.rootfs_mode != 'networked':
        tar_image_path = image_path + 'image.tar.bz2'
        print_log('Move image to %s'%tar_image_path)
        shutil.move('%simage.tar.bz2'%TMP_DIR, tar_image_path)
    else:
        #mv rootfs
        if need_move:
            print_log('Move rootfs to %s ...'%image_path)
            ret = os.system('cp -r %s* %s'%(TMP_DIR, image_path))
            if ret:
                raise Exception('Move rootfs error!')

    print_log('Remove temp rootfs...')
    shutil.rmtree(TMP_DIR)



def create_pxeboot_configs(node_type, arch):
    kernel = '/kernels/default/bzImage-%s'%arch
    initramfs = '/initramfs/initramfs-%s'%arch

    for kernel in node_type.kernels:
        if kernel.arch == arch:
            kernel = '/kernels/%s/bzImage-%s'%(node_type.type_name,arch)
            break

    config = 'DEFAULT %s node_type=%s rootfs_type=%s arch=%s\n' % (kernel, node_type.type_name, node_type.rootfs_mode, arch)
    config += 'APPEND initrd=%s\n'%initramfs

    if not os.path.exists(PXECONFIG_DIR):
        os.makedirs(PXECONFIG_DIR)

    open(PXECONFIG_DIR+'%s-%s'%(node_type.type_name, arch),'w').write(config)


def main(yaml_file, is_db_skip, is_image_skip):
    try:
        node_type = parse_specification(yaml_file)

        if not is_db_skip:
            insert_node_type(node_type)
            insert_params_spec(node_type)

        if node_type.kernels:
            print_log('Installing kernels:')
            install_kernels(node_type)
            print_log('Kernels installed successful!')
        else:
            print_log('No kernels found for this node type. Skip kernels installations')


        for arch in node_type.supported_archs:
            if not is_image_skip:
                print_log('Make image for %s architecture:'%arch)
                install_image(node_type, arch)

            create_pxeboot_configs(node_type, arch)

        print_log('Images installed successful!')
    except Exception, err:
        print_log(err)
        print_log('Image installation failed!')
        return 1

    return 0

#-----------------------------------------------------------------------------------

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print 'Usage: node-type-installer [--skip-db] [--skip-images] <yaml-file>'
        sys.exit(1)

    yaml_file = sys.argv[-1]
    is_skip_db = False
    is_skip_images = False

    for param in sys.argv:
        if param.strip() == '--skip-db':
            is_skip_db = True
        elif param.strip() == '--skip-images':
            is_skip_images = True

    ret = main(yaml_file, is_skip_db, is_skip_images)

    sys.exit(ret)

