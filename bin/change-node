#!/usr/bin/python
"""
Copyright (C) 2011 Konstantin Andrusenko
    See the documentation for further information on copyrights,
    or contact the author. All Rights Reserved.

@author Konstantin Andrusenko
@date July 30, 2011

change-node is utility for changing node's boot parameters (type, arch, hostname)
"""

import os
import re
import sys
import shutil
import getopt
from blik.utils.databaseConnection import DatabaseConnection
from blik.utils.exec_command import run_command

PXECONFIG_DIR = '/opt/blik/diskless/pxelinux.cfg/'
SUPPORTED_ARCHS = ('x86', 'x86_64')

dbconn = DatabaseConnection()

def change_node_in_database(uuid, type_sid, arch):
    type_id = None
    if type_sid:
        rows = dbconn.select("SELECT id FROM nm_node_type WHERE type_sid=%s", (type_sid,))

        if not rows:
            raise Exception('Node type with SID "%s" is not found in database'%type_sid)

        type_id = rows[0][0]

    rows = dbconn.select("SELECT mac_address, architecture, node_type FROM nm_node WHERE node_uuid=%s",(uuid,))
    if not rows:
        raise Exception('Node with UUID "%s" is not found in database'%uuid)

    mac_address = rows[0]

    if type_id is None:
        type_id = rows[2]

    if arch:
        if arch not in SUPPORTED_ARCHS:
            raise Exception('Architecture %s is not supported'%arch)

        arch_change = ", architecture='%s'"%arch
    else:
        arch_change = ''
        arch = rows[1]

    query = "UPDATE nm_node SET node_type=%s %s WHERE node_uuid='%s'" % (type_id, arch_change, uuid)

    dbconn.modify(query)

    rows = dbconn.select("SELECT mac_address, architecture FROM nm_node WHERE node_uuid=%s",(uuid,))
    if not rows:
        raise Exception('Node with UUID "%s" is not found in database'%uuid)

    return mac_address, arch


def change_node_config(uuid, type_sid, arch, mac_address, hostname):
    #config_file = mac_address.replace(':', '-').lower()
    config_file = uuid.lower()

    config = '%s%s-%s'%(PXECONFIG_DIR, type_sid, arch)
    dest_config = PXECONFIG_DIR + config_file


    lines = open(config).readlines()
    f = open(dest_config, 'w')
    for line in lines:
        if line.startswith('DEFAULT') and hostname:
            line = line.strip() + ' hostname=%s\n'%hostname
        f.write(line)
    f.close()


def usage(err_msg=None):
    if err_msg:
        print ('ERROR: %s'%err_msg)
    print ('Usage: change-node -t|--node-type <node type> -u|--uuid <node uuid> [-a|--arch <node arch>] [-h|--hostname <host name>]')
    sys.exit(0)

#---------------------------------------------------------------------------------------------------------------------

if __name__ == '__main__':
    try:
        opts,args = getopt.getopt(sys.argv[1:], "t:a:u:h:", ["node-type=", "arch=", "uuid=","hostname=",'dont-unpack'])
    except getopt.GetoptError, err:
        usage(err)

    node_type = arch = uuid = hostname = None

    for opt, arg in opts:
        if opt in ['-t','--node-type']:
            node_type = arg
        elif opt in ['-a', '--arch']:
            arch = arg
        elif opt in ['-u', '--uuid']:
            uuid = arg
        elif opt in ['-h', '--hostname']:
            hostname = arg

    if uuid is None:
        usage('Node UUID is not specified')

    if node_type is None:
        usage('Node type is not specified')

    if hostname is not None:
        if not re.match('[a-zA-Z][a-zA-Z0-9\-]+$', hostname):
            print('ERROR! Hostname is invalid. Allowed characters are: a-z, A-Z, 0-9 and "-"')
            sys.exit(1)

        #check already exists hostname in DB
        rows = dbconn.select('SELECT id FROM nm_node WHERE hostname=%s', (hostname,))

        if rows:
            print('ERROR! Hostname %s is already used by another node!' % hostname)
            sys.exit(1)

    try:
        mac, arch = change_node_in_database(uuid, node_type, arch)

        change_node_config(uuid, node_type, arch, mac, hostname)
    except Exception, err:
        print ('ERROR: %s'%err)
        sys.exit(1)

    sys.exit(0)
